<?xml version="1.0" encoding="utf-8"?>
<tree>
  <meta>
    <name>Pre test: codifica multipla ed automatismi</name>
    <tips>Leggere con attenzione questo file: è sufficientemente autoesplicativo</tips>
    <desc>
     Costruire un filtro intelligente per la codifica e decodifica di messaggi testuali secondo lo schema indicato; il testo in ingresso viene generato in base all'albero input; quest'ultimo può cambiare in base alla correzione. Il messaggio, prima di essere decodificato, viene convertito in esadecimale ed in tale formato, viene spedito a gruppi di SpecialByte (1 SpecialByte = 8 SimboliBit). Il destinatario di tale comunicazione è il decodificatore che deve recuperare il messaggio originario, secondo la procedura inversa.
    </desc>
    <tips>Provare a mano con una stringa di caratter, ad es: asdfghj</tips>
    <tips>Ripassare la tabella ASCII</tips>
    <constrains>
      <constrain>
        Il nome del file viene fornito tramite stdin
      </constrain>
      <constrain>
        Visualizzare il messaggio originario e codificato, in un formato chiaro e facile da leggere.
      </constrain>
      <constrain>
        Visualizzare la lunghezza del messaggio codificato, ma non convertito, e della sua versione codificata e convertita.
      </constrain>
      <constrain>
        Confrontare i codebook di coding e decoding e verificare l'uguaglianza di questi (anche nel'ordine).
      </constrain>
      <constrain link="https://github.com/STB1019/PgAr/blob/2017/4/sample_alg.html">
        L'algoritmo deve funzionare con il caso indicato
      </constrain>
      <constrain>
        Il messaggio si ottiene ponendo in ordine crescente i testi contenuti elencati in inputs. In caso di link, 
        recuperare automaticamente.
      </constrain>
      <tips link="https://docs.oracle.com/javase/tutorial/networking/urls/readingURL.html">Suggerimento</tips>
      <constrain>
        Se il messaggio recuperato dai link deve contenere solo caratteri alfanumerici, underscore escluso (_)
      </constrain>
    </constrains>
    <queries>
      <query id="1" name_function="f1">
        Codifica messaggio
      </query>
      <query id="2" name_function="f2">
        DeCodifica messaggio
      </query>
      <query id="3" name_function="f3">
        Messaggio codificato, convertitlo in esadecimale
      </query>
      <query id="4" name_function="f4">
        Messaggio convertito
      </query>
      <query id="5" name_function="f5">
        Messaggio codificato e convertito, deve essere diviso in SpecialBites e spedito
      </query>
      <query id="6" name_function="f6">
        Messaggio pacchettizzato, deve essere ricompattato dal formato SpecialBytes e decodificato per essere riconvertito
      </query>
      <query id="7" name_function="f7">
        Messaggio in input: mantiene/filtra solo i numeri
      </query>
      <query id="7" name_function="f8">
        Messaggio in input: mantiene/filtra solo le lettere (maiuscole e minuscole)
      </query>
    </queries>
    <outputs>
      <output>
        Dato in input b+c+d+e, filtrare i numeri e mostrare la codifica del messaggio in tutte le fasi
      </output>
      <output>
        Dato un input generico, filtrare solo le lettere e mostrare la dimensione del medesimo messaggio nelle varie fasi di 
        codifica.
      </output>
    </outputs>
  </meta>
  <inputs>
    <input id="A">ababababababababababbababbbbabababa</input>
    <input id="b">abasdaabaabababab</input>
    <input id="c">mmmdsddskssoirnfjvskmddvsoadkjifnfnjs</input>
    <input id="d">ikfmsvmvivif4mi284rimnbueun3n8849m4b9b393</input>
    <input id="e">m20mv030b84m90m9bennu9ihfhbhidjiokds</input>
    <input id="f">2f2kf'rk90fjvj9ejfi2r9kwRGEGRFedSf</input>
    <input id="F">sDFETherGETrydjuRtdrshedtsyDJfUYfJyd</input>
    <input id="D">1</input><input id="G">0</input>
    <input id="5" link="https://raw.githubusercontent.com/SAndroidEOfficial/sandroide-redbear-nano/master/BLE_RedBearNano-SAndroidE.hex">
    link da scaricare.
    </input>
  </inputs>
</tree>
